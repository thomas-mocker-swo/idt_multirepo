# File: .github/workflows/TerraformDeployAction.yml

name: 'Terraform Deploy on Pull Request'

on:
  push:
    branches:
    - main
  workflow_dispatch:
  
# Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write


jobs:
  terraform-plan-development:
    name: Terraform Plan Development
    runs-on: ubuntu-latest
    outputs:
      plan_file: ${{ steps.setplan.outputs.plan_file }}
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_DEV }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }} 

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -backend-config="backend_dev.conf"

      - name: Terraform Plan
        id: setplan
        run: |
          PLAN_NAME="tfplan-dev-${GITHUB_RUN_ID}"
          terraform plan -out=${PLAN_NAME}.binary -var-file=var_dev.tfvars
          terraform show -no-color ${PLAN_NAME}.binary
          echo "plan_file=${PLAN_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-development
          path: |
            ${{ steps.setplan.outputs.plan_file }}.binary

  terraform-apply-development:
    name: Terraform Apply Development
    runs-on: ubuntu-latest
    needs: terraform-plan-development
    environment:
      name: development  # <- das Environment mit Approval!
    steps:
      - name: Approval Gate
        run: echo "Waiting for approval..."

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_DEV }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }} 

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-development

      - name: Terraform Init
        run: terraform init -backend-config="backend_dev.conf"

      - name: Terraform Apply
        run: |
          terraform apply "tfplan-dev-${GITHUB_RUN_ID}.binary"

      - name: Cleanup Plan Files
        run: rm -f "tfplan-dev-${GITHUB_RUN_ID}.binary"

  sign-off-development:
    name: Sign Off on Development
    runs-on: ubuntu-latest
    needs: terraform-apply-development
    environment:
      name: production  # <- das Environment mit Approval!
    steps:
      - name: Approval Gate
        run: echo "Sign off on production complete. Deployment successful!"



  terraform-plan-production:
    name: Terraform Plan Production
    runs-on: ubuntu-latest
    needs: sign-off-development
    outputs:
      plan_file: ${{ steps.setplan.outputs.plan_file }}
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -backend-config="backend_prod.conf"

      - name: Terraform Plan
        id: setplan
        run: |
          PLAN_NAME="tfplan-prod-${GITHUB_RUN_ID}"
          terraform plan -out=${PLAN_NAME}.binary -var-file=var_prod.tfvars
          terraform show -no-color ${PLAN_NAME}.binary
          echo "plan_file=${PLAN_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-production
          path: |
            ${{ steps.setplan.outputs.plan_file }}.binary

  terraform-apply-production:
    name: Terraform Apply Production
    runs-on: ubuntu-latest
    needs: terraform-plan-production
    environment:
      name: production  # <- das Environment mit Approval!
    steps:
      - name: Approval Gate
        run: echo "Waiting for approval..."

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}    
    
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-production

      - name: Terraform Init
        run: terraform init -backend-config="backend_prod.conf"

      - name: Terraform Apply
        run: |
          terraform apply "tfplan-prod-${GITHUB_RUN_ID}.binary"

      - name: Cleanup Plan Files
        run: rm -f "tfplan-${GITHUB_RUN_ID}.binary"

  sign-off-production:
    name: Sign Off on Production
    runs-on: ubuntu-latest
    needs: terraform-apply-production
    environment:
      name: production  # <- das Environment mit Approval!
    steps:
      - name: Approval Gate
        run: echo "Sign off on production complete. Deployment successful!"

        
